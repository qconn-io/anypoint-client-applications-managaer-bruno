meta {
  name: Validate Client Credentials
  type: http
  seq: 3
}

get {
  url: {{url}}/accounts/api/profile
  body: none
  auth: bearer
}

auth:bearer {
  token: {{access_token}}
}

script:post-response {
  if (res.status === 200) {
    const user = res.getBody();
    console.log("Client credentials are valid");
    console.log("Authenticated as:", user.username);
    console.log("User ID:", user.id);
    
    if (user.organization.length > 0) {
      console.log("Organization access:", user.organization.name);
    }
    
    console.log("Token validation successful âœ“");
    
  } else if (res.status === 401) {
    console.error("Client credentials are invalid or expired");
    console.error("Response:", res.getBody());
  } else {
    console.error("Unexpected error during validation:", res.status, res.getBody());
  }
}

tests {
  test("Status should be 200 for valid credentials", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Should return user information", function() {
    if (res.getStatus() === 200) {
      const body = res.getBody();
      expect(body).to.have.property('id');
      expect(body).to.have.property('username');
    }
  });
}

docs {
  # Validate Client Credentials
  
  Validates the client application's access token by making an authenticated
  request to retrieve user profile information.
  
  ## Purpose
  - Verify client credentials are working
  - Test token validity and permissions
  - Troubleshoot authentication issues
  
  ## Prerequisites
  - Client access token must be generated first
  - Token must not be expired
  
  ## Expected Responses
  - 200: Credentials are valid, returns user profile
  - 401: Invalid or expired credentials
  - 403: Valid credentials but insufficient permissions
  
  ## Troubleshooting
  - If 401: Regenerate client access token
  - If 403: Check application permissions and scopes
  - If other errors: Verify network connectivity and API availability
}
