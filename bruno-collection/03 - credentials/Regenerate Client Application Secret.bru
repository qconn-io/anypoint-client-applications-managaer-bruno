meta {
  name: Regenerate Client Application Secret
  type: http
  seq: 2
}

post {
  url: {{url}}/exchange/api/v2/organizations/{{organization_id}}/applications/{{client_app_id}}/secret/reset
  body: none
  auth: bearer
}

auth:bearer {
  token: {{access_token}}
}

script:post-response {
  if (res.status === 200) {
    const response = res.getBody();
    const newSecret = response.clientSecret;
    
    // Store the new secret
    bru.setEnvVar("client_secret", newSecret);
    
    console.log("Client secret regenerated successfully");
    console.log("New Client Secret:", newSecret);
    console.log("Client ID remains:", bru.getEnvVar('client_id'));
    
    console.log("\n⚠️  IMPORTANT: The old client secret is now invalid!");
    console.log("Update all systems using this application with the new secret.");
    
  } else {
    console.error("Failed to regenerate client secret:", res.status, res.getBody());
  }
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(201);
  });
  
  test("Should return new client secret", function() {
    const body = res.getBody();
    expect(body).to.have.property('clientSecret');
    expect(body.clientSecret).to.be.a('string');
    expect(body.clientSecret.length).to.be.greaterThan(0);
  });
}

docs {
  # Regenerate Client Secret
  
  Generates a new client secret for the application, invalidating the previous one.
  This is critical for credential rotation and security management.
  
  ## Security Considerations
  - The old secret becomes invalid immediately
  - All systems using the old secret will lose access
  - Coordinate secret rotation across all consuming systems
  
  ## Prerequisites
  - Valid access token with application management permissions
  - Application ID of the target application
  
  ## Response
  - `clientSecret`: New secret value
  - Client ID remains unchanged
  
  ## Best Practices
  - Perform secret rotation during maintenance windows
  - Update all consuming systems before rotating
  - Store new secrets securely
  - Monitor for authentication failures after rotation
  
  ## Post-Response Actions
  - Updates the client_secret environment variable
  - Previous tokens generated with old secret remain valid until expiration
}
